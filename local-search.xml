<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>【MATLAB 学习笔记(三)】</title>
    <link href="/2021/10/07/MATLAB3/"/>
    <url>/2021/10/07/MATLAB3/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>The article is about os: Linux. Because of some reason, I have to learn the  Linux and ROS based on it. </p>          </div><span id="more"></span><style>  /* 设置整个页面的字体 */  /* 只设置 markdown 字体 */   html, body,  {  }  .markdown-body {    font-family: KaiTi,"Arial",Georgia, sans, serif;    font-size: 20px;  }</style><h2 id="1-符号变量："><a href="#1-符号变量：" class="headerlink" title="1    符号变量："></a>1    符号变量：</h2><h3 id="1-1-定义符号变量"><a href="#1-1-定义符号变量" class="headerlink" title="1.1    定义符号变量"></a>1.1    定义符号变量</h3><p><strong>syms x       【syms作用为定义一个符号变量】</strong></p><p>定义一个<strong>符号变量x</strong></p><p>用于进行公式的化简和计算,后续可以做一些符号操作如: $ y=x^2+2x+1 $</p><h3 id="1-2-符号变量的微分"><a href="#1-2-符号变量的微分" class="headerlink" title="1.2    符号变量的微分"></a>1.2    符号变量的微分</h3><h4 id="1-2-1-符号函数的极限"><a href="#1-2-1-符号函数的极限" class="headerlink" title="1.2.1 符号函数的极限"></a>1.2.1 符号函数的极限</h4><p>求符号函数极限的命令为limit，其调用格式为:</p><script type="math/tex; mode=display">limit(f,x,a)</script><ul><li>即求函数f关于变量x在a点的极限。</li><li>若x省略，则采用系统默认的自变量。a的默认值为0.</li></ul><p>limit函数的另一种功能是求单边极限，其调用格式为:</p><ol><li><p><strong>limit(f,x,a, right’)</strong></p></li><li><p><strong>limit(f,x,a,’left’)</strong></p></li></ol><p>eg: 求下列极限</p><script type="math/tex; mode=display">\lim_{n \to \infty} (1+\frac{1}{n})^n</script><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs matlab">程序如下:<br>syms n;<br>f=(<span class="hljs-number">1</span>+<span class="hljs-number">1</span>/n)^n;<br>&gt;&gt;limit(f,n,<span class="hljs-built_in">inf</span>)<br><span class="hljs-built_in">ans</span> = <span class="hljs-built_in">exp</span>(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h4 id="1-2-2-符号函数的导数"><a href="#1-2-2-符号函数的导数" class="headerlink" title="1.2.2 符号函数的导数"></a>1.2.2 符号函数的导数</h4><p>MATLAB中的求导函数为:</p><script type="math/tex; mode=display">diff(f,x,n)</script><ul><li><p>即求函数f关于变量x的n阶导数。</p></li><li><p>参数x的用法同求极限函数limit，可以缺省，默认值与limit相同，n的默认值是1。</p></li></ul><p>eg：求下列函数的导数</p><script type="math/tex; mode=display">z=\frac{xe^y}{y^2},求解z_{x}^{'},z_{y}^{'}</script><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">程序如下:<br><span class="hljs-operator">&gt;&gt;</span>g<span class="hljs-operator">=</span>x<span class="hljs-operator">*</span><span class="hljs-built_in">exp</span>(y)<span class="hljs-operator">/</span>y<span class="hljs-operator">^</span><span class="hljs-number">2</span>;<br><span class="hljs-operator">&gt;&gt;</span>diff(g,x)<br>ans <span class="hljs-operator">=</span><br><span class="hljs-built_in">exp</span>(y)<span class="hljs-operator">/</span>y<span class="hljs-operator">^</span><span class="hljs-number">2</span><br><br><span class="hljs-operator">&gt;&gt;</span>diff(g,y)<br>ans <span class="hljs-operator">=</span><br>(x<span class="hljs-operator">*</span><span class="hljs-built_in">exp</span>(y))<span class="hljs-operator">/</span>y<span class="hljs-operator">^</span><span class="hljs-number">2</span><span class="hljs-operator">-</span> (<span class="hljs-number">2</span><span class="hljs-operator">*</span>x<span class="hljs-operator">*</span><span class="hljs-built_in">exp</span>(y))<span class="hljs-operator">/</span>y<span class="hljs-operator">^</span><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="1-3-符号变量的积分"><a href="#1-3-符号变量的积分" class="headerlink" title="1.3    符号变量的积分"></a>1.3    符号变量的积分</h3><h4 id="1-3-1-不定积分"><a href="#1-3-1-不定积分" class="headerlink" title="1.3.1 不定积分"></a>1.3.1 不定积分</h4><p>符号函数的积分通过<strong>int</strong>函数实现</p><p> 调用格式为：  <strong>int(f,x)</strong>  【求函数f对变量x的不定积分】</p><p>eg：求下列不定积分</p><script type="math/tex; mode=display">\int (3-x^2)^3 dx</script><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs matlab">程序如下:<br>syms x;<br>f=(<span class="hljs-number">3</span>-x^<span class="hljs-number">2</span>)^<span class="hljs-number">3</span>;<br>&gt;&gt;int(f)<br><span class="hljs-built_in">ans</span>=...<br></code></pre></td></tr></table></figure><h4 id="1-3-2-定积分"><a href="#1-3-2-定积分" class="headerlink" title="1.3.2 定积分"></a>1.3.2 定积分</h4><p>调用格式为：  <strong>int(f,x,a,b)</strong> 【其中a,b分别代表定积分的下限和上限】</p><p>eg：求如下定积分</p><script type="math/tex; mode=display">\int_{-\infty}^{+\infty} \frac{1}{1+x^2} dx</script><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs matlab">程序如下:<br>syms x;<br>&gt;&gt;int(<span class="hljs-number">1</span>/(<span class="hljs-number">1</span>+x^<span class="hljs-number">2</span>),-<span class="hljs-built_in">inf</span>,<span class="hljs-built_in">inf</span>)<br><span class="hljs-built_in">ans</span>= <span class="hljs-built_in">pi</span><br></code></pre></td></tr></table></figure><h3 id="1-4-级数"><a href="#1-4-级数" class="headerlink" title="1.4    级数"></a>1.4    级数</h3><h4 id="1-4-1-级数求和"><a href="#1-4-1-级数求和" class="headerlink" title="1.4.1 级数求和"></a>1.4.1 级数求和</h4><p>求无穷级数的和需要<strong>符号表达式求和函数symsun()</strong>,调用格式为：</p><script type="math/tex; mode=display">symsum(s,v,n,m)</script><ul><li><strong>s表示一个级数的通项，</strong>是一个符号表达式。</li><li>v是求和变量,v省略时使用系统的默认变量。</li><li>n和m是求和变量v的初值和末值。</li></ul><p>eg：求如下无穷级数的和</p><script type="math/tex; mode=display">S=\sum_{n=1}^{\infty} (-1)^{n+1} \frac{1}{n}</script><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs matlab">程序如下:<br>syms n;<br>s=symsum((<span class="hljs-number">-1</span>)^(n+<span class="hljs-number">1</span>)/n,<span class="hljs-number">1</span>,<span class="hljs-built_in">inf</span>)<br>&gt;&gt;s<br><span class="hljs-built_in">ans</span> = <span class="hljs-built_in">log</span>(<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><h4 id="1-4-2-泰勒级数"><a href="#1-4-2-泰勒级数" class="headerlink" title="1.4.2 泰勒级数"></a>1.4.2 泰勒级数</h4><p><strong>taylor( )函数</strong>将函数展开为幂级数。其调用格式为:</p><script type="math/tex; mode=display">taylor(f,v,a,Name,Value)</script><ul><li><p><strong>该函数将函数f按变量v在a点展开为泰勒级数</strong>,v省略时按默认规则确定变量, a的默认值是0。</p></li><li><p>Name和Value为选项设置，经常成对使用，前者为选项名，后者为该选项的值。</p></li></ul><p>eg：求f(x)在x=1处的5阶泰勒级数展开式</p><script type="math/tex; mode=display">f(x)=\frac{1+x+x^2}{1-x+x^2}</script><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs matlab">程序如下:<br>&gt;&gt;syms x;<br>&gt;&gt;f=(<span class="hljs-number">1</span>+x+x^<span class="hljs-number">2</span>)/(<span class="hljs-number">1</span>-x+x^<span class="hljs-number">2</span>);<br>&gt;&gt;taylor(f,x,<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;Order&#x27;</span>,<span class="hljs-number">6</span>)<br><span class="hljs-built_in">ans</span>=...<br></code></pre></td></tr></table></figure><h3 id="1-5-符号方程的求解"><a href="#1-5-符号方程的求解" class="headerlink" title="1.5 符号方程的求解"></a>1.5 符号方程的求解</h3><h4 id="1-5-1-代数方程符号求解"><a href="#1-5-1-代数方程符号求解" class="headerlink" title="1.5.1 代数方程符号求解"></a>1.5.1 代数方程符号求解</h4><p><strong>solve( )</strong>函数求解代数方程,常用调用格式为：</p><ol><li><strong>solve(s):</strong>求解符号表达式s的代数方程，求解变量为默认变量。</li><li><strong>solve(s,v):</strong>求解符号表达式s的代数方程，求解变量为v。</li><li><strong>solve(s1,s2,… ,sn,v1,v2,…,vn):</strong> 求解符号表达式s1，s2，…，sn组成的代数方程组,求解变量分别为vl，v2，…， vn。</li></ol><p>eg：求解方程 <strong>$ ax^2+bx+c=0 $</strong></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs matlab">程序如下:<br>syms x a b c;<br>solve(a*x^<span class="hljs-number">2</span>+b*x+c==<span class="hljs-number">0</span>)<br>&gt;&gt; <span class="hljs-built_in">ans</span> = ...<br></code></pre></td></tr></table></figure><h4 id="1-5-2常微分方程符号求解"><a href="#1-5-2常微分方程符号求解" class="headerlink" title="1.5.2常微分方程符号求解"></a>1.5.2常微分方程符号求解</h4><p><strong>dsolve( )</strong>求解符号常微分方程,调用格式为:</p><script type="math/tex; mode=display">dsolve(e,c,v)</script><ul><li>用于求解常微分方程e在初值条件c下的特解。</li><li>参数v是方程中的自变量，省略时按默认原则处理，若没有给出初值条件c，则求方程的通解。</li></ul><p><strong>dsolve在求常微分方程组时的调用格式为</strong>:</p><script type="math/tex; mode=display">dsolve(e1,e2,… ,en,c1,c2,…  ,cn,v)</script><ul><li><p>用于求解常微分方程组el，e2，…，en在初值条件c1，c2，…, cn下的特解</p></li><li><p>若不给出初值条件，则求方程组的通解。v给出求解变量，若没有指定自变量，则采用默认自变量t。</p></li></ul><p>eg：求下列微分方程组的解</p><script type="math/tex; mode=display">\left\{\begin{matrix}\frac{dx}{dt}=4x-2y \\  \frac{dy}{dt}=2x-y\end{matrix}\right.</script><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs matlab">程序如下:<br>&gt;&gt;syms x y t;<br>&gt;&gt;[x,y]=dsolve(<span class="hljs-string">&#x27;Dx=4*x-2*y&#x27;</span>,<span class="hljs-string">&#x27;Dy=2*x-y&#x27;</span>,t)<br>x=..<br>y=..<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MATLAB学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MATLAB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QuartUs</title>
    <link href="/2021/10/06/QuartUs/"/>
    <url>/2021/10/06/QuartUs/</url>
    
    <content type="html"><![CDATA[<p>使用软件：<strong>Quartus II</strong></p>]]></content>
    
    
    <categories>
      
      <category>eda实验</category>
      
    </categories>
    
    
    <tags>
      
      <tag>EDA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【MCU 学习笔记(一)】 基础</title>
    <link href="/2021/09/26/mcu/"/>
    <url>/2021/09/26/mcu/</url>
    
    <content type="html"><![CDATA[<div class="note note-light">            <p>This my learning notebook about MCU. Hope that the note book will help you.  </p>          </div><span id="more"></span><style>  /* 设置整个页面的字体 */  html, body, .markdown-body {    font-family: KaiTi,"Microsoft YaHei",Georgia, sans, serif;    font-size: 17px;  }  /* 只设置 markdown 字体 */  .markdown-body {    font-family: KaiTi,"Microsoft YaHei",Georgia, sans, serif;    font-size: 17px;  }</style><h1 id="单片机"><a href="#单片机" class="headerlink" title="单片机"></a>单片机</h1><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ul><li><p><strong>定义</strong>：单片机，英文Micro Controller Unit，简称MCU.</p><p>内部集成了<strong>CPU、RAM、ROM、定时器、中断系统、通讯接口</strong>等一系列电脑的常用硬件功能</p></li><li><p>单片机的<strong>任务是信息采集（依靠传感器)、处理</strong>，依靠CPU和硬件设备(例如电机，LED等)的控制</p><ul><li>单片机跟计算机相比，单片机算是一个袖珍版计算机。</li><li>一个芯片就能构成完整的计算机系统。但在性能上，与计算机相差甚远，但单片机成本低、体积小、结构简单。</li></ul></li></ul><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p><strong>51单片机</strong>是指80年代Intel开发的<strong>8051单片机内核</strong>的统称，与”8051”内核一样的单片机都统称为51系列单片机</p><h4 id="STC89C52单片机"><a href="#STC89C52单片机" class="headerlink" title="STC89C52单片机"></a>STC89C52单片机</h4><p><img src="/2021/09/26/mcu/img1.jpg"></p><table><thead><tr><th>所属系列</th><th>51单片机系列</th></tr></thead><tbody><tr><td>公司</td><td>STC公司</td></tr><tr><td>位数</td><td>8位</td></tr><tr><td>RAM</td><td>512字节</td></tr><tr><td>ROM</td><td>8K</td></tr><tr><td>工作频率</td><td>12MHz</td></tr></tbody></table><p>持续更新中….(maybe)</p><p><del>(题主是一个三分钟热度的废物，，，大家不要学)</del></p>]]></content>
    
    
    <categories>
      
      <category>MCU学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MCU</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【MATLAB 学习笔记(二)】 数据插值&amp;曲线拟合&amp;数值微积分&amp;线性方程组</title>
    <link href="/2021/09/25/MATLAB2/"/>
    <url>/2021/09/25/MATLAB2/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>The article is about os: Linux. Because of some reason, I have to learn the  Linux and ROS based on it. </p>          </div><span id="more"></span><style>  /* 设置整个页面的字体 */  /* 只设置 markdown 字体 */  .markdown-body {    font-family: KaiTi,"Microsoft YaHei",Georgia, sans, serif;    font-size: 18px;  }</style><h2 id="数据插值（or函数逼近）"><a href="#数据插值（or函数逼近）" class="headerlink" title="数据插值（or函数逼近）"></a>数据插值（or函数逼近）</h2><p><strong><em>效果：根据有限个点的取值情况，合理估算出附近其他点的取值情况</em></strong></p><ol><li><p>interp1（）：一维数据插值</p><p>调用格式为Y1=interp1(X,Y,Xl,method)</p><p>根据X、Y的值，计算函数在X1处的值。其中，X、Y是两个等长的已知向量，分别表示采样点和采样值,即题目中已经给出的数据。X1是一个向量或标量,表示要插值的点。</p><p><strong>Emphasis： usage of method</strong></p><p>（1）<strong>linear：</strong>线性插值，即默认。与插值点靠近的两个数据点用直线连接，然后选取对应插值点数    据y，样本点数越大，误差越小。</p><p>（2）<strong>earest：</strong>最近点插值，即选择最近样本点的值作为插值数据。</p><p>（3）<strong>pchip:</strong>分段3次埃尔米特插值。采用分段三次多项式，除满足插值条件外，还需满足在若干节点    处相邻段插值函数的一阶导数相等，使得曲线光滑的同时，还具有保形性。</p><p>（4）<strong>spline:</strong> 3次样条插值。每个分段内构造一个三次多项式，使其插值函数除满足插值条件外，还    要求在各节点处具有连续的一阶和二阶导数，插值函数的性态更好。</p></li></ol><p><strong>Extension：</strong>选择三次多项式的原因：多项式次数越高，越容易产生震荡而偏离原函数，称为<strong>龙格（Runge）现象</strong></p><ol><li><p>interp2():二维插值函数。</p><p>调用格式为Z1=interp2(X,Y,Z,X1,YI,method)</p><p>其中，X、Y是两个向量，表示两个参数的采样点, Z是</p><p>采样点对应的函数值。X1，Y1是两个标量或向量，表示要插值的点。</p></li></ol><h2 id="曲线拟合（or函数逼近）"><a href="#曲线拟合（or函数逼近）" class="headerlink" title="曲线拟合（or函数逼近）"></a>曲线拟合（or函数逼近）</h2><p><strong><em>方法：建立一个函数去逼近所给数据，然后根据找到的函数，计算预测点的值。</em></strong></p><p><strong>与数据插值类似，曲线拟合也是一种函数逼近的方法。</strong></p><p>X X1  X2 … Xk  … Xn</p><p>Y Y1 Y2 … Yk … Yn</p><ol><li><strong>定义：</strong>构造函数g(x)去逼近未知函数f(x)，使得误差δ= g(xi)-f(xi) (i=1.,2.,…n) 在某种意义下达到最小。</li></ol><p>[拟合的最小误差用最小二乘法（通过最小化误差的平方和来寻找数据的最佳函数匹配）]</p><ol><li><p><strong>polyfit( ):</strong>多项式拟合函数。</p><p>函数功能:求得最小二乘拟合多项式系数。</p><p>调用格式:</p><p>(1) P=polyfit(X,Y,m)</p><p>(2) [P,S]=polyfit(X,Y,m)</p><p>(3) [P,S,mu]=polyfit(X,Y,m)</p></li></ol><p><strong>注释：</strong>根据样本数据X和Y，产生一个m次多项式P及其在采样点误差数据S，mu是一个二元向量，mu(1)是 mean(X)[平均值],而mu(2)是std(X)[标准差]。</p><h2 id="数值微分与数值积分"><a href="#数值微分与数值积分" class="headerlink" title="数值微分与数值积分"></a>数值微分与数值积分</h2><h4 id="数值微分的实现"><a href="#数值微分的实现" class="headerlink" title="数值微分的实现"></a>数值微分的实现</h4><p>MATLAB提供了求向前差分的函数diff,其调用格式有三种:</p><p>（1） dx=diff(x): 计算向量x的一-阶向前差分</p><p>​    dx(i)=x(i+1)- -x(i )[=1,2，..，n-1]</p><p>（2）dx=diff(x,n): 计算向量x的n阶向前差分。</p><p>（3） dx=diff(A,n,dim): 计算矩阵A的n阶差分，dim=1时 ( 默认状态) ,按列计算差分; dim=2， 按行计算差分。</p><h4 id="数值积分的实现"><a href="#数值积分的实现" class="headerlink" title="数值积分的实现"></a>数值积分的实现</h4><p><strong>（1）基于自适应辛普森方法</strong></p><p>[I,n]=quad(filename,a,b,tol,trace)</p><p><strong>（2）基于自适应Gauss-Lobatto方法</strong></p><p>​    [l,n]=quadl(filename,a,b,tol,trace)</p><p>​    其中，filename是被积函数名[此处一般为函数句柄定义题目所给已知形式函数]; </p><p>​    1. a和b分别是定积分的下限和上限，积分限[a，b]必须是有限的，不能为无穷大(Inf) [下文将提到积分    限为无穷大的积分函数];</p><p>​    2. tol用来控制积分精度，默认时取tol=10-6; </p><p>​    3. trace控制是否展现积分过程，若取非0则展现积分过程，取0则不展现，默认时取trace=0; 返回参    数I即定积分的值，n为被积函数的调用次数。</p><p>   <strong>(3)基于全局自适应积分方法</strong></p><p>​     I=integral(filename,a,b）</p><p><strong>注释：</strong>其中I是计算得到的积分，filename是被积函数，a，b分别是定积分上下限，积分限可以无穷大。</p><p>(第一个输入参数必须为函数句柄)</p><p><strong>（4）基于自适应高斯-克朗罗德方法</strong></p><p>​    [l,err]=quadgk(filename,a,b)</p><p>​    [可用来求震荡函数的定积分]</p><p>​    其中，err返回近似误差范围，其他参数的含义和用法与quad函数相同。积分，上下限可以是无穷大( -    Inf或+Inf)，也可以是复数。</p><p><strong>（5）基于梯形积分法</strong></p><p>​    I=trapz（x,y)</p><p>​    其中，向量x、y定义函数关系y=f(x)。</p><p> <img src="/2021/09/25/MATLAB2/img1.png" alt> </p><p><strong>（6）※多重定积分的数值求解</strong>  </p><p>求二重积分： </p><script type="math/tex; mode=display">\int_{c}^{d} \int_{a}^{b} f(x,y) \,dx \,dy</script><p>​    A. l=integral2 （filename,a,b,c,d)  <filename是被积函数></filename是被积函数></p><p>​    B. l=quad2d  (filename,a,b,c,d)</p><p>​    C. I=dblquad （filename,a,b,c,d,tol) </p><h2 id="解线性方程组-System-of-linear-Equations"><a href="#解线性方程组-System-of-linear-Equations" class="headerlink" title="解线性方程组[System of linear Equations]"></a>解线性方程组[System of linear Equations]</h2><p><strong>（1）线性方程组的直接解法</strong></p><ul><li><p>高斯（Gauss）消元法</p></li><li><p>列主元消去法</p></li><li><p>矩阵的三角分解法</p><p>A. 利用左除运算符的直接解法</p><p>B.利用矩阵分解法求解线性方程组[运算速度快，节省运算空间]</p></li><li><p>LU分解（着重介绍）  □QR分解   □Cholesky分解</p><p><strong>MATLAB的LU分解函数</strong></p><ul><li><strong>[L,U]=lu(A):</strong> 产生一个上三角阵U和一一个变换形式的下三角阵L，使之满足A=LU。注意，这里的矩阵A必须是方阵。</li><li><strong>[L,U,P]=lu(A):</strong> 产生一个上三角阵U和一个下三角阵L以及一个置换矩阵P，使之满足PA=LU。</li></ul></li><li><p>流程图示（Flow Chart）：</p></li></ul><p><img src="/2021/09/25/MATLAB2/img3.png" alt> </p><p><strong>（2）迭代法求解线性方程组</strong></p><p>​    A. 雅克比（Jacobi）迭代法</p><p>​    B. 高斯-赛德尔（Gauss-Serdel）迭代法</p><p>（参考6-2读者有兴趣可自行查阅，作者能力有限）</p>]]></content>
    
    
    <categories>
      
      <category>MATLAB学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MATLAB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【MATLAB 学习笔记(一)】 矩阵&amp;字符串&amp;数据统计函数&amp;多项式</title>
    <link href="/2021/09/25/MATLAB/"/>
    <url>/2021/09/25/MATLAB/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>The article is about os: Linux. Because of some reason, I have to learn the  Linux and ROS based on it. </p>          </div><span id="more"></span><style>  /* 设置整个页面的字体 */  html, body, .markdown-body {    font-family: KaiTi,"Microsoft YaHei",Georgia, sans, serif;    font-size: 15px;  }  /* 只设置 markdown 字体 */  .markdown-body {    font-family: KaiTi,"Microsoft YaHei",Georgia, sans, serif;    font-size: 15px;  }</style><h3 id="矩阵元素的引用方式（MATLAB矩阵按列储存）"><a href="#矩阵元素的引用方式（MATLAB矩阵按列储存）" class="headerlink" title="矩阵元素的引用方式（MATLAB矩阵按列储存）"></a>矩阵元素的引用方式（MATLAB矩阵按列储存）</h3><ol><li><p>通过下标引用</p><p>矩阵按列分配序号</p></li><li><p>通过序号来引用</p><p>矩阵元素的序号和下标利用sub2ind和ind2sub函数</p></li></ol><p><strong>此处说明sub2ind函数用法：将下标转化为序号</strong></p><p>​    e.g:  D=sub2ind（size（a），[i元素的行]，[j元素的列]）</p><p>​         （a为矩阵，每一对i，j对应a中元素的序号-不是元素）</p><ol start="3"><li><p>利用空矩阵[ ]可以删除矩阵中的元素</p></li><li><p><strong>reshape函数</strong>——reshape（A，m，n）</p><p>在总元素不变的前提下，将矩阵重新排成m*n的矩阵</p></li></ol><p>​    （函数用法可通过‘help+函数名（function）’查询）</p><p><strong>Ps：MATLAB的点运算指它们的对应元素进行相关运算，要求两个矩阵同型</strong></p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ol><li><p><strong>find函数</strong>可以找出元素在集合中的位置并返回值</p></li><li><p><strong>eval函数</strong>把参数字符串中的内容作为对应的MATLAB命令来执行</p></li><li><p><strong>abs函数和double函数</strong>都可以用来获取字符串矩阵对应的ASCII码数值矩阵</p><p><strong>char函数</strong>是把ASCII码转化为字符串矩阵</p></li><li><p><strong>strcmp（x,y）</strong>比较是否相等，而strcmpi是在忽略字母大小写前提下，比较是否相等。</p></li><li><p><strong>findstr（s1，s2）</strong>返回短字符串在长字符串中的开始位置</p></li><li><p><strong>strrep（s1，s2，s3）</strong>将s1中所有子字符串s2替换为s3</p></li></ol><h3 id="矩阵的数据统计分析"><a href="#矩阵的数据统计分析" class="headerlink" title="矩阵的数据统计分析"></a>矩阵的数据统计分析</h3><ol><li><p>mean（）：算术平均值</p></li><li><p>median（）：求中值</p></li><li><p>sum（）：求和函数</p></li><li><p>max/min（）：生成一个行向量，每个代表一列最大值</p></li><li><p>prod（）：求积函数</p></li><li><p>cumsum（）:累加和函数（第i个元素为前i个元素的和）</p></li><li><p>cumprod（）：累乘积函数（第i个元素为前i个元素的积）</p></li><li><p>std（A，flag，dim）：计算标准差函数，flag（取0或1）决定调用两种公式的哪一种计算，dim决定按列算还是按行算</p></li><li><p>corrcoef（A）：相关系数函数，返回矩阵A所形成的一个相关系数矩阵，其中第i行第j列表示原矩阵第i列和第j列的相关系数</p></li><li><p>sort（）；a.排序函数,对向量x按升序排列</p><p> b.[Y,I]=sort(A,dim,mode)</p></li></ol><p><em><strong>注释：</strong></em>其中，dim指明对A的列还是行进行排序，默认为列，mode指明按升序还是降序排序，若取“ascend” ，则按升序;若取“descend” ，则按降序，默认为升序。输出参数中，Y是排序后的矩阵，而I记录Y中的元素在A中位置，即第几列。</p><h3 id="多项式计算："><a href="#多项式计算：" class="headerlink" title="多项式计算："></a>多项式计算：</h3><p>（MATLAB中n次多项式用长度为n+1的系数行向量（从0到n）表示，系数为按次从高到低）</p><ol><li><p><strong>conv（p1，p2）：</strong>多项式相乘函数</p></li><li><p><strong>[Q,r]=deconv(PI,P2) :</strong> 多项式相除函数。</p><p>其中，Q返回多项式P1除以P2的商式，r返回P1除以P2的余式。Q和r仍是多项式系数向量。</p><p>deconv是conv的逆函数，因此有P1=conv(Q, P2)+r</p></li><li><p>polyder():多项式求导函数。</p><p>调用格式:</p><p>​    (1) p=polyder(P):求多项式P的导函数。</p><p>​    (2) p=polyder(P,Q):求P . Q的导函数。</p><p>​    (3) [p,q]=polyder(P,Q): 求P/Q的导函数，导函数的分子存入p，分母存入q。 </p></li><li><p>polyval（p,x)</p><p>其中，p为多项式系数向量; x可以是标量、向量或矩阵。若x为标量，则求多项式在该点的值;若x为向量或矩阵，则对向量或矩阵中的每个元素求多项式的值。</p></li><li><p>polyvalm(p,x)</p><p>其调用格式与polyval相同，但含义不同。</p><p><strong>polyvalm函数</strong>要求x为方阵，以方阵为自变量求多项式的值。</p><p>设A为方阵，P代表多项式</p><ul><li><p>**polyvalm(P,A)**的含义是:</p><p>AxAxA- 5xAxA+8*eye(size(A)) [矩阵运算 ]</p></li><li><p>而**polyval(P,A)**的含义是:</p><p>A. xA.xA-5xA.xA+8*ones(size(A)) [点运算]</p></li></ul></li><li><p>多项式求根函数：roots（p）[p仍为多项式系数向量]</p><p>此函数与poly（x）函数相逆，x为多项式的根，可求出原多项式</p></li></ol><p>​     </p>]]></content>
    
    
    <categories>
      
      <category>MATLAB学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MATLAB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Html 学习笔记(二)】 列表&amp;&amp;表单</title>
    <link href="/2021/09/24/html2/"/>
    <url>/2021/09/24/html2/</url>
    
    <content type="html"><![CDATA[<div class="note note-light">            <p>This book just contains the basic usage of html, for further learning you can choose others. </p>          </div><span id="more"></span><style>  /* 设置整个页面的字体 */  html, body, .markdown-body {    font-family: KaiTi,"Microsoft YaHei",Georgia, sans, serif;    font-size: 15px;  }  /* 只设置 markdown 字体 */  .markdown-body {    font-family: KaiTi,"Microsoft YaHei",Georgia, sans, serif;    font-size: 15px;  }</style><h3 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h3><p><strong>列表是用来布局的</strong></p><p><strong>特点</strong> :整洁,自由,有序,根据使用情景划分为三类: 无序列表,有序列表 和 自定义列表</p><h4 id="无序列表-重点"><a href="#无序列表-重点" class="headerlink" title="无序列表(重点)"></a>无序列表(重点)</h4><p>无序列表的基本语法格式如下:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">ul</span>&gt; &lt;<span class="hljs-selector-tag">ul</span>&gt;标签表示<span class="hljs-selector-tag">HTML</span>页面中项目的无序列表<br>&lt;<span class="hljs-selector-tag">li</span>&gt;列表项 <span class="hljs-number">1</span> &lt;/<span class="hljs-selector-tag">li</span>&gt; &lt;<span class="hljs-selector-tag">li</span>&gt;列表项用&lt;<span class="hljs-selector-tag">li</span>&gt;定义<br>&lt;<span class="hljs-selector-tag">li</span>&gt;列表项 <span class="hljs-number">2</span> &lt;/<span class="hljs-selector-tag">li</span>&gt;<br>&lt;<span class="hljs-selector-tag">li</span>&gt;&lt;<span class="hljs-selector-tag">p</span>&gt;列表项&lt;/<span class="hljs-selector-tag">p</span>&gt; &lt;/<span class="hljs-selector-tag">li</span>&gt;<br>...<br>&lt;/<span class="hljs-selector-tag">ul</span>&gt;<br>注意点:<br></code></pre></td></tr></table></figure><ol><li>&lt; ul &gt;中只能嵌套&lt; li &gt;</li><li>&lt; li&gt;和&lt;/ li&gt;之间可以容纳所有元素</li><li>无序列表使用时常用CSS来设置样式</li></ol><h4 id="有序列表-理解"><a href="#有序列表-理解" class="headerlink" title="有序列表(理解)"></a>有序列表(理解)</h4><p>有序列表即为排列有序的列表,列表项按一定顺序排列</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml">在HTML标签中,<span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span>标签用于定义有序列表,列表排序以数字来显示<br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>标签来定义列表项<br>使用格式如下:<br><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项 1 <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项 2 <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>列表项<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>...<br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="自定义列表-重点"><a href="#自定义列表-重点" class="headerlink" title="自定义列表(重点)"></a>自定义列表(重点)</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml">在HTML标签中,<span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span>标签用于定义列表<br>与<span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>(定义项目/名字),和<span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>(描述每一个项目/名字)一起使用<br>基本语法如下:<br><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>名词<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>名词解释 1 <span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>名词解释 2 <span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>...<br><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h2><p>在HTML中,表单由 <strong>表单域 、 表单元素 和 提示信息</strong> 3 个部分组成。</p><p><img src="/2021/09/24/html2/number12.png"></p><h4 id="表单域"><a href="#表单域" class="headerlink" title="表单域"></a>表单域</h4><p><strong>表单域</strong> 是包含表单元素的区域</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span>用于定义表单域,实现用户信息的传递和收集。<br><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span>会把它范围内的表单元素信息提交给服务器。<br>基本语法如下:<br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;url&quot;</span><span class="hljs-attr">method</span>=<span class="hljs-string">&quot;提交方式&quot;</span><span class="hljs-attr">name</span>=<span class="hljs-string">&quot;表单域名称&quot;</span>&gt;</span><br>各种表单元素<br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2021/09/24/html2/number13.png"></p><h4 id="表单元素"><a href="#表单元素" class="headerlink" title="表单元素"></a>表单元素</h4><p>表单元素就是允许用户在表单中输入或者选择的内容控件。</p><p><strong>&lt; input &gt;输入表单元素</strong></p><p>&lt; input &gt;用于收集用户信息,包含一个 type 属性,输入字段有很多种形式(可以是 <strong>文本字段、复选框、单选按钮</strong> 等)</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">语法格式:<br>&lt;<span class="hljs-built_in">input</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;属性值&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p><img src="/2021/09/24/html2/number14.png"></p><p>&lt; input &gt;标签除了type以外,还有其他属性:</p><p><img src="/2021/09/24/html2/number15.png"></p><p>注意点如下:</p><ol><li><p>name是表单元素名称, 要求单选框和复选框有相同的name值</p><p>p.s:name和value主要给后台人员使用</p></li><li><p>单选按钮和复选框可以设置checked属性,checked=”checked”</p></li></ol><p><strong>页面打开时默认选中这个按钮 (不过现在好像改手动了,协议要求)</strong></p><p><strong>&lt; label &gt;标签(input的补充)</strong></p><p>&lt; label &gt;标签用于绑定一个表单元素,当点击&lt; label &gt;标签内的文本时,浏览器就会自动将焦点(光标)转移到表单元素上。 <strong>用来提升用户体验</strong></p><p><img src="/2021/09/24/html2/number16.png"></p><p>P.s:&lt; label &gt;标签的for属性与相关元素的id属性必须相同</p><p><strong>&lt; select &gt;下拉表单元素</strong></p><p>在页面中，如果有多个选项让用户选择，并且想要节约页面空间时，可以使用 &lt; select &gt;标签控件</p><p>定义 <strong>下拉列表</strong> 。</p><p><img src="/2021/09/24/html2/number17.png"></p><p>Tips: &lt; option &gt;中定义selected=”selected”时,当前项即为默认选项</p><p>(有点类似之前的那个checked=”checked”)</p><p><strong>&lt; textarea &gt;文本域元素</strong></p><p>&lt; textarea &gt;标签用于定义多行文本输入,常见于 <strong>留言板，评论</strong> 。</p><h6 id="语法"><a href="#语法" class="headerlink" title="语法:"></a>语法:</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot; 3 &quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot; 20 &quot;</span>&gt;</span><br>文本内容<br><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br></code></pre></td></tr></table></figure><p>cols=“每行中的字符数”，rows=“显示的行数”。(没必要记住)</p><p><strong>我们在实际开发中不会使用 ， 都是用CSS来改变大小 。</strong></p><h2 id="查阅文档-参考资料"><a href="#查阅文档-参考资料" class="headerlink" title="查阅文档(参考资料)"></a>查阅文档(参考资料)</h2><p>W3C:<a href="http://www.w3school.com/cn/">http://www.w3school.com/cn/</a></p><p>MDN:<a href="https://developer.mozilla.org/zh_CN/">https://developer.mozilla.org/zh_CN/</a></p><p><a href="https://hexo.io/docs/one-command-deployment.html">https://hexo.io/docs/one-command-deployment.html</a>)</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端-html</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Linux 学习笔记(一)】 概念及基础命令</title>
    <link href="/2021/09/21/Linux/"/>
    <url>/2021/09/21/Linux/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>The article is about os: Linux. Because of some reason, I have to learn the  Linux and ROS based on it. </p>          </div><span id="more"></span><style>  /* 设置整个页面的字体 */  html, body, .markdown-body {    font-family: KaiTi,"Microsoft YaHei",Georgia, sans, serif;    font-size: 15px;  }  /* 只设置 markdown 字体 */  .markdown-body {    font-family: KaiTi,"Microsoft YaHei",Georgia, sans, serif;    font-size: 15px;  }</style><h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h2 id="shell-amp-bash-amp-终端"><a href="#shell-amp-bash-amp-终端" class="headerlink" title="shell &amp; bash &amp; 终端"></a>shell &amp; bash &amp; 终端</h2><ol><li><p>What is Shell ？</p><p>中文名叫“壳”,是一个处理用户请求的工具或接口，它负责解释用户输入的命令，调用用户希望使用的程序.</p></li><li><p>What is Bash ？</p><p>Bourne Again shell,简称Bash，它是Linux操作系统默认的shell.</p></li><li><p>什么是终端</p><p>当使用图形用户界面时，需要另一种程序与shelI进行交互，这类程序统称为终端.</p></li></ol><h2 id="Linux终端常用指令"><a href="#Linux终端常用指令" class="headerlink" title="Linux终端常用指令"></a>Linux终端常用指令</h2><ul><li><p><strong>基础常用类</strong></p><table><thead><tr><th><strong>pwd</strong></th><th>当前所在路径</th></tr></thead><tbody><tr><td><strong>cd</strong> ..</td><td>返回上一级目录</td></tr><tr><td>**mkdir+**“文件夹名称”</td><td>创建文件夹</td></tr><tr><td><strong>touch</strong>+“文件名称”</td><td>创建文件</td></tr><tr><td><strong>rm</strong>_+“文件名称”</td><td>删除文件</td></tr><tr><td><strong>rmdir</strong>_+“文件名称夹”</td><td>删除非空文件夹</td></tr><tr><td><strong>cp</strong>  “文件名称1” “文件名称2”</td><td>拷贝文件1后命名为文件2</td></tr><tr><td><strong>cp -r</strong> “文件夹名称1” “文件夹名称2”</td><td>拷贝文件夹1后命名为文件夹2</td></tr><tr><td><strong>sudo apt install</strong> +“软件”</td><td>下载</td></tr><tr><td><strong>sudo</strong>  <strong>apt remove</strong> + “软件”</td><td>卸载</td></tr><tr><td><strong>cat</strong>/more/grep</td><td>查看文件内容</td></tr><tr><td><strong>mv</strong></td><td>移动文件与目录，或修改文件与目录的名称</td></tr></tbody></table></li></ul><p>  ​                                    </p><ul><li><p><strong>vim常用命令</strong></p><ul><li><p><strong>基础命令</strong></p><table><thead><tr><th><strong>vim/vim+filename</strong></th><th><strong>进入vim(此时为命令模式)</strong></th></tr></thead><tbody><tr><td><strong>输入 i/a/o键</strong></td><td><strong>进入 插入模式</strong></td></tr><tr><td><strong>输入 esc键</strong></td><td><strong>进入 命令模式</strong></td></tr><tr><td><strong>:q</strong></td><td><strong>退出vim</strong></td></tr></tbody></table></li><li><p><strong>命令模式常用命令</strong></p><table><thead><tr><th>:wq</th><th>保存退出</th></tr></thead><tbody><tr><td>:q!</td><td>强制退出</td></tr><tr><td>dd</td><td>删除当前行</td></tr><tr><td>G</td><td>快速移动到最后一行</td></tr></tbody></table></li><li><p><strong>插入模式常用快捷键</strong></p><table><thead><tr><th>home键</th><th>移动到行首</th></tr></thead><tbody><tr><td>end键</td><td>移动到行尾</td></tr></tbody></table></li></ul></li><li><p>Linux<strong>目录结构</strong></p></li></ul><p><img src="/2021/09/21/Linux/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F.png"></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><section class="footnotes"><h2>参考</h2><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>参考资料1：<a href="https://www.bilibili.com/video/BV1Sv411r7vd?spm_id_from=333.999.0.0">2021韩顺平 一周学会Linux</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>参考资料2： <a href="https://www.bilibili.com/video/BV1b5411g7hr?spm_id_from=333.999.0.0">B站ROS机器人框架教程.</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Linux学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Ubuntu 学习笔记(一)】</title>
    <link href="/2021/09/21/Ubuntu/"/>
    <url>/2021/09/21/Ubuntu/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>The article is about os: Linux. Because of some reason, I have to learn the  Linux and ROS based on it. </p>          </div><span id="more"></span><style>  /* 设置整个页面的字体 */  html, body, .markdown-body {    font-family: KaiTi,"Microsoft YaHei",Georgia, sans, serif;    font-size: 15px;  }  /* 只设置 markdown 字体 */  .markdown-body {    font-family: KaiTi,"Microsoft YaHei",Georgia, sans, serif;    font-size: 15px;  }</style><h1 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h1><ul><li><strong>什么是Ubuntu</strong></li></ul><p>Ubuntu（友帮拓、优般图、乌班图)是一个以桌面应用为主的开源GNU/Linux操作系统，<strong>Ubuntu是基于GNU/Linux</strong>，支持x86、amd64(即x64)和pp架构，由全球化的专业开发团队(Canonical Ltd)打造的。<strong>专业的Python开发者一般会选择Ubuntu 这款Linux系统作为生产平台.</strong></p><ul><li><strong>Ubuntu下各文件介绍</strong></li></ul><table><thead><tr><th>文件名称</th><th>介绍</th></tr></thead><tbody><tr><td>bin</td><td>所有用户都可以使用的、基本的命令</td></tr><tr><td>boot</td><td>启动文件，比如内核等</td></tr><tr><td>dev</td><td>设备文件，Linux特有的</td></tr><tr><td>etc</td><td>配置文件</td></tr><tr><td>home</td><td>家目录</td></tr><tr><td>book</td><td>用户book的家目录</td></tr><tr><td>lib</td><td>库</td></tr><tr><td>media</td><td>插上u盘等外设时会挂载到该目录下</td></tr><tr><td>mnt</td><td>用来挂载其他文件系统</td></tr><tr><td>opt</td><td>Optional，可选的程序</td></tr><tr><td>proc</td><td>用来挂载虚拟的proc文件系统，可以查看各进程(process)的信息</td></tr><tr><td>root</td><td>root用户的家目录</td></tr><tr><td>sbin</td><td>基本的系统命令，系统管理员才能使用</td></tr><tr><td>sys</td><td>用来挂载虚拟的sys文件系统，可以查看系统信息:比如设备信息</td></tr><tr><td>tmp</td><td>临时目录,存放临时文件</td></tr><tr><td>bin</td><td>绝大部分的用户可使用指令都放在这里(与开机无关)，/bin中的命令跟开机有关</td></tr><tr><td>games</td><td>游戏</td></tr><tr><td>include</td><td>头文件</td></tr><tr><td>lib</td><td>库</td></tr><tr><td>local</td><td>系统管理员在本机自行安装、下载的软件</td></tr><tr><td>sbin</td><td>非系统正常运作所需要的系统命令</td></tr><tr><td>share</td><td>放置共享文件的地方，比如/usr/share/man里存放帮助文件</td></tr><tr><td>src</td><td>源码</td></tr><tr><td>var</td><td>主要针对常态性变动的文件，包括缓存(cache)、 log文件等</td></tr></tbody></table><ul><li><strong>Linux的文件管理</strong></li></ul><p>我们知道Linux的目录结构为树状结构，最顶级的目录为根目录 /。其他目录通过挂载可以将它们添加到树中，通过解除挂载可以移除它们。（Linux的基本思想：一切皆文件）其中两个比较重要的概念：</p><p>♦ <strong>绝对路径：</strong><br>路径的写法，由根目录 <strong>/</strong> 写起，例如： /usr/share/doc 这个目录。</p><p>♦ <strong>相对路径：</strong><br>路径的写法，不是由 <strong>/</strong> 写起，例如由 /usr/share/doc 要到 /usr/share/man 底下时，可以写成： <strong>cd ../man</strong> 这就是相对路径的写法。</p><h3 id="可执行脚本"><a href="#可执行脚本" class="headerlink" title="可执行脚本"></a>可执行脚本</h3><p> 脚本Script ，<strong>一种解释执行的程序</strong><br>Linux下常见的三种脚本程序:</p><ul><li><p><em>Shell**脚本</em></p></li><li><p><em>Perl**脚本</em></p></li><li><p><em>Python脚本</em></p></li></ul><p>Tips:<strong>脚本程序本质是一个具有可执行权限的文本文件</strong></p><p>脚本程序都是由解释器来执行的.</p><ul><li>Shell脚本解释器:/bin/sh</li><li>Perl脚本解释器:/bin/perl</li><li>Python脚本解释器:/bin/python3</li></ul><h3 id="Shell脚本"><a href="#Shell脚本" class="headerlink" title="Shell脚本"></a>Shell脚本</h3><p> Shell脚本，按Shell的语法写出来的脚本是Linux自带的脚本语言,相当于Windows下的 DOS批处理脚本</p><p><strong>要点与细节</strong></p><ol><li>第一行必须声明解释器# !/bin/sh</li><li>必须有x权限，才能够执行<br>比如，一个程序只有作者执行，别人不能执行<br>rwXr-—r–</li><li>执行程序时，必须加上路径./ hello.sh<br>/home /shaofa/hello.sh</li></ol><p>Python脚本</p><ol><li>编辑一个文本文件,保存为hello.py</li><li>添加可执行权限<br>chmod +xhello.py</li><li>执行程序<br>./hello.py</li></ol>]]></content>
    
    
    <categories>
      
      <category>Linux学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【听说读写(一)】 常用习语</title>
    <link href="/2021/09/21/English-Speaking/"/>
    <url>/2021/09/21/English-Speaking/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>English-Speaking-Tips，this file is just for my own interests.</p>          </div><span id="more"></span><p><em><strong>*Don’t  take it personally, it is his pathology.*</strong></em></p><p><em><strong>*(不是和你过去不去，是他老毛病了)*</strong></em></p><p><em><strong>*Point taken.*</strong></em></p><p><em><strong>*(了解了)*</strong></em></p><p><em><strong>*It is rife with scientific inaccuracy.*</strong></em></p><p>(这完全不符合科学)</p><p>Challenge accepted. </p><p>(接受挑战)</p><p>You are just gonna be done.</p><p>(你就那么走了)</p><p>You do it accidently on purpose.</p><p>(你“无意”做的)——此处为暗讽</p><p>With all due respect.</p><p>(恕我直言)</p><p>God rest your soul.</p><p>(你死了)</p><p>Statistically unlikely.</p><p>(概率上不太可能)</p><p>Message received.</p><p>（消息收到）</p><p>Physical confrontation.</p><p>(肢体冲突)</p><p><em><strong>*Be less than useless.*</strong></em></p><p><em><strong>*(毫无作用)*</strong></em></p><p><em><strong>*It is time for a showdown.*</strong></em></p><p><em><strong>*(是时候摊牌了)*</strong></em></p><p><em><strong>*Beats the hell out of me.*</strong></em></p><p><em><strong>*(我也无法解释)*</strong></em></p><p><em><strong>*Sperm count.*</strong></em></p><p><em><strong>*(精子量)*</strong></em></p><p><em><strong>*A previously unknown state of matter.*</strong></em></p><p><em><strong>*(一种前所未知的物质)*</strong></em></p><p><em><strong>*Lead author.*</strong></em></p><p><em><strong>*(第一作者)*</strong></em></p><p><em><strong>*No offense.*</strong></em></p><p><em><strong>*(没有别的意思—-无意冒犯)*</strong></em></p><p><em><strong>*I sense a disturbance in the force.*</strong></em></p><p><em><strong>*(我有不好的预感)*</strong></em></p><p> <em><strong>*Pretty sure.*</strong></em></p><p><em><strong>*(比较确定)*</strong></em></p><p><em><strong>*Hang on,*</strong></em></p><p><em><strong>*(等等)*</strong></em></p><p>Nice and loose</p><p>(严阵以待)</p><p>Wine  glasses should have handles.</p><p>(一醉解千愁)</p><p>Nice try.</p><p>(少来了)</p><p>Way ahead of you.</p><p>(早想到了)</p><p>Counterpoint.</p><p>(反对)</p>]]></content>
    
    
    <categories>
      
      <category>English</category>
      
    </categories>
    
    
    <tags>
      
      <tag>English-Speaking</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Python 学习笔记(一)】 基础</title>
    <link href="/2021/09/21/python/"/>
    <url>/2021/09/21/python/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>The article is about os: Linux. Because of some reason, I have to learn the  Linux and ROS based on it. </p>          </div><span id="more"></span><style>  /* 设置整个页面的字体 */  html, body, .markdown-body {    font-family: KaiTi,"Microsoft YaHei",Georgia, sans, serif;    font-size: 15px;  }  /* 只设置 markdown 字体 */  .markdown-body {    font-family: KaiTi,"Microsoft YaHei",Georgia, sans, serif;    font-size: 15px;  }</style><h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><ol><li><p>**ord ( )**可以把字符转换为对应的Unicode 码</p><p>（ASCII码是Unicode的子集）</p></li><li><p><strong>’’’ ‘’’</strong>可以用来定义长字符串</p></li><li><p>Print（“ ”，end=” ”）</p><p>解释：print调用的时候默认以换行符结尾，end可以替代换行符</p></li><li><p><strong>Str（）函数</strong>，将数字（or布尔值True or False）转化为字符串</p></li><li><p><strong>X.replace</strong>(‘字符1’，‘字符2’)</p><p>X为目标字符串，用字符2代替字符1</p></li><li><p><strong>[：：-1] 步长为负</strong>，从右到左反向提取</p></li><li><p><strong>列表逆序</strong><br>sorted(x[,reverse=True])  无方框中内容则正序排列 </p></li><li><p>**split( ):**基于指定分隔符将字符串分割成多个子字符串</p><p>( )括号中所填写即为指定分隔符</p></li></ol><p>​    <em><strong>Eg：</strong></em><strong>A.split(*)</strong> 基于*分割字符串A</p><p>​    Join()作用与split相反，用于将一系列子字符串连接起来，用法相同</p><p>​    <em><strong>Eg：</strong></em><strong>‘x’.Join(A)</strong> 基于*连接多个子字符串A，A为储存多个字符串的链表</p><p>​    <strong>Subtitle one：</strong>字符串统计常用函数</p><ol start="9"><li><p><strong>a.startswith(‘x’)</strong> 判断是否以指定字符串X开头</p></li><li><p>a.endswith(‘x’) 判断是否以指定字符串X结尾</p></li><li><p><strong>a.find(‘x’) ：</strong>第一次出现指定字符串x的位置</p></li><li><p><strong>a.rfind(‘x’)：</strong>最后一次出现指定字符串x的位置</p></li><li><p><strong>a.count(‘x’)：</strong>指定字符（串）出现的次数</p><p>Subtitle two:字符串去除函数</p></li><li><p>**strip( ):**去除字符串首尾指定信息</p></li></ol><p>​    **Istrip( ):**去除字符串左边指定信息</p><p>​    **rstrip( ):**去除字符串右边指定信息</p><ol start="15"><li>大小写转换<br>编程中关于字符串大小写转换的情况，经常遇到。为了方便学习，<em><strong>先设定一个测试变量</strong></em>︰<pre><code>                            **a = &quot;gaoqilove programming, love sXT&quot;**</code></pre></li></ol><table><thead><tr><th>示例</th><th>说明</th><th>结果</th></tr></thead><tbody><tr><td>a.capitalizeo</td><td>产生新的字符串,首字母大写</td><td>‘Gaoqi love programming,love sxt’</td></tr><tr><td>a.titleo</td><td>产生新的字符串,每个单词都首字母大写</td><td>‘GaoqiLove Programming.Love sxt’</td></tr><tr><td>a.uppero</td><td>产生新的字符串,所有字符全转成大写</td><td>‘GAoQILOVE PROGRAMMING,LOVE sxT</td></tr><tr><td>a.lowero</td><td>产生新的字符串,所有字符全转成小写</td><td>‘gaoqi love programming, love sxt’</td></tr><tr><td>a.swapcaseo</td><td>产生新的,所有字母大小写转换</td><td>‘GAOQILovE PROGRAMMING,LOVE</td></tr></tbody></table><ol start="16"><li><strong>X.center(a,’b’)</strong> ————ljust()左对齐 / rjust()右对齐  </li></ol><h2 id="Math常用库函数"><a href="#Math常用库函数" class="headerlink" title="Math常用库函数"></a>Math常用库函数</h2><p><strong>常用的函数:</strong></p><table><thead><tr><th>函数名称</th><th>作用</th></tr></thead><tbody><tr><td>math.ceil(x)</td><td>向上取整，返回不小于x的最小整数</td></tr><tr><td>math.floor(x)</td><td>向下取整，返回不大于x的最大整数</td></tr><tr><td>math.gcd(a,b)</td><td>返回a、b的最大公约数，比循环递归快</td></tr><tr><td>math.factorial(x)</td><td>返回x的阶乘x! x小于0或者是小数报错</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Python学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Python 学习笔记(二)】 列表&amp;元组</title>
    <link href="/2021/09/21/python2/"/>
    <url>/2021/09/21/python2/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>The article is about  Python. I write down this notebook in my college’s first year, maybe it is too basic for the reader.  </p>          </div><span id="more"></span><style>  /* 设置整个页面的字体 */  html, body, .markdown-body {    font-family: KaiTi,"Microsoft YaHei",Georgia, sans, serif;    font-size: 15px;  }  /* 只设置 markdown 字体 */  .markdown-body {    font-family: KaiTi,"Microsoft YaHei",Georgia, sans, serif;    font-size: 15px;  }</style><h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><h3 id="列表-list"><a href="#列表-list" class="headerlink" title="列表(list)"></a>列表(list)</h3><ol><li><p>使用推导式可以创建列表，例：</p><p>a = [x×2for x in range(5)]        #循环创建多个元素<br>a    [O，2,4，6,8]<br>a =[x×2 for x in range(100)     if x%9==0]    #通过if 过滤元素a[0,18,36,54,72,90,108,126,144,162,180,198]</p></li><li><p>x=list(range())嵌套创建列表较常用（list函数将目标转化为列表 形式）</p></li></ol><h4 id="列表元素增加和删除"><a href="#列表元素增加和删除" class="headerlink" title="列表元素增加和删除"></a>列表元素增加和删除</h4><ol><li><p>x.append（a）——在x列表尾部添加元素x</p></li><li><p>x.extend（a）——在x列表尾部添加元素x（此函数可添加系列元素，与append只能添加部分不同）</p></li></ol><p><em><strong>Attention:</strong></em></p><ol start="3"><li><p>x.insert（y，a）——在x列表y处添加元素a，后续元素后挪</p></li><li><p>del x[y]——在x列表中删除除去y号元素，后续元素前挪</p></li><li><p>x.pop(y) 删除y号元素并返回指定元素，默认末尾元素</p></li></ol><h4 id="列表元素搜索"><a href="#列表元素搜索" class="headerlink" title="列表元素搜索"></a>列表元素搜索</h4><ol><li><p>x.index(value,[start,[end]]) ——函数可以换取元素value首次出现的索引位置，其中start与end可指定，默认从0开始</p></li><li><p>x.count(value) ——获得指定元素在列表中出现次数（不在则返回0）——但一般使用更简洁的in</p><p>Eg： a （not）in x  如果x列表中存在a返回true，not判断是否不在</p></li></ol><h4 id="列表排序"><a href="#列表排序" class="headerlink" title="列表排序"></a>列表排序</h4><ol><li><p>x.sort()——直接对列表x排序，默认升序</p><p>  x.sort(reverse=True) 则与之对应，为降序排列</p></li><li><p>import.random </p><p>random.shuffle(x)——调用函数库，将x随机打乱排序</p></li></ol><h3 id="元组-tuple"><a href="#元组-tuple" class="headerlink" title="元组(tuple)"></a>元组(tuple)</h3><table><thead><tr><th>操作函数或方法</th><th>描述</th></tr></thead><tbody><tr><td>S.add(x)</td><td>如果x不在集合S中，将x增加到S</td></tr><tr><td>s.discard(x)</td><td>移除S中元素x，如果x不在集合S中，不报错</td></tr><tr><td>S.remove(x)</td><td>移除S中元素x，如果x不在集合S中，产生KeyError异常</td></tr><tr><td>s.clear()</td><td>移除S中所有元素</td></tr><tr><td>s.pop()</td><td>随机返回S的一个元素，更新S，若S为空产生KeyError异常</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Python学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Html 学习笔记(一)】 标签&amp;&amp;表格</title>
    <link href="/2021/09/21/html/"/>
    <url>/2021/09/21/html/</url>
    
    <content type="html"><![CDATA[<div class="note note-light">            <p>This book just contains the basic usage of html, for further learning you can choose others. </p>          </div><span id="more"></span><style>  /* 设置整个页面的字体 */  html, body, .markdown-body {    font-family: KaiTi,"Microsoft YaHei",Georgia, sans, serif;    font-size: 15px;  }  /* 只设置 markdown 字体 */  .markdown-body {    font-family: KaiTi,"Microsoft YaHei",Georgia, sans, serif;    font-size: 15px;  }</style><h1 id="HTML-NoteBook"><a href="#HTML-NoteBook" class="headerlink" title="HTML NoteBook"></a>HTML NoteBook</h1><h2 id="标签关系"><a href="#标签关系" class="headerlink" title="标签关系"></a>标签关系</h2><ol><li>包含关系</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;head&gt;</span><br><span class="hljs-section">&lt;title&gt;</span> <span class="hljs-section">&lt;/title&gt;</span><br><span class="hljs-section">&lt;/head&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>并列关系</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;head&gt;</span> <span class="hljs-section">&lt;/head&gt;</span><br><span class="hljs-section">&lt;body&gt;</span> <span class="hljs-section">&lt;/body&gt;</span><br></code></pre></td></tr></table></figure><p>​    具体说明如下：</p><p><img src="/2021/09/21/html/number1.png"></p><h2 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h2><ol><li>表头标签</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span> 通常来说明文档类型 (html5)<br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span> 通常来定义语言，&quot;en&quot;为英语，&quot;zh-CN&quot;为中文<br>#字符集——通过<span class="hljs-tag">&lt;<span class="hljs-name">meta</span>&gt;</span>标签的charset来规定HTML采用的字符编码,不写可能造成乱码情况<br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>标题标签</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>-<span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span><br>p.s:<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span> 这是一级标题 <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>标签语义:作为标题使用,一个标题占一行，字体加粗字号变大。</strong></p><ol start="3"><li>段落标签</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">p</span>&gt;标签用于定义段落,可以将网页划分为若干段落.<br>&lt;<span class="hljs-selector-tag">p</span>&gt; 这是一个段落 &lt;/<span class="hljs-selector-tag">p</span>&gt;<br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.s</span>:段落之间保有空隙<br></code></pre></td></tr></table></figure><p>​    <strong>标签语义:把HTML文档划分为若干段落</strong></p><ol start="4"><li>换行标签</li></ol><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm">&lt;<span class="hljs-keyword">br</span> /&gt;为强制换行标签<br></code></pre></td></tr></table></figure><p>​    <strong>标签语义:强制换行</strong></p><ol start="5"><li><p>文本格式化标签</p><p><strong>标签语义:突出重要性</strong></p></li><li><p>其他常用标签(布局标签)</p><p>&lt; div &gt;和&lt; span &gt;没有语义,是一个盒子,用来装内容<br>特点:<div>用来布局,一行只能放一个<div>——大盒子<br><span>用来布局,一行可以放多个<span>——小盒子</span></span></div></div></p></li><li><p>图像标签</p><p>&lt; img src=”图像的url” /&gt;<br>src指明图像的路径和文件名</p></li></ol><p><img src="/2021/09/21/html/number2.png"></p><ol start="8"><li><p>路径</p><p><strong>“路径”指定文件的位置,路径可以分为:</strong></p></li></ol><ul><li><p>相对路径—图片相对于HTML页面的的位置,即从代码所在文件出发去寻找目标文件</p></li><li><p>绝对路径—根目录下的绝对位置</p></li></ul><p><img src="/2021/09/21/html/number3.png"></p><ol start="9"><li>超链接</li></ol><ul><li><p>语法格式</p><p>&lt; a  href=”跳转目标” target=”窗口的弹出方式”&gt;   文本或图像  &lt; /a &gt;</p></li></ul><p><img src="/2021/09/21/html/number4.png"></p><ul><li>链接分类:</li></ul><p><img src="/2021/09/21/html/number5.png"></p><ul><li>使用方式:</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">1.下载链接<br>&lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;照片.zip&quot;</span>&gt;下载链接&lt;/a&gt;<br>2.图片链接<br>&lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;http://www.qq.com&quot;</span>&gt;&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;王老师.jpg&quot;</span>&gt;&lt;/a&gt;<br>3.锚点链接<br>链接的属性中&lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;#two&quot;</span>&gt;王老师个人简介&lt;/a&gt;<br>目标位置标签&lt;h3 <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;two&quot;</span>&gt;王老师个人简介&lt;/h3&gt;<br></code></pre></td></tr></table></figure><h2 id="注释和特殊字符"><a href="#注释和特殊字符" class="headerlink" title="注释和特殊字符"></a>注释和特殊字符</h2><ul><li><p>注释 ( 快捷键是:ctri+/ )</p></li><li><p>特殊字符</p><p><strong>重点记住空格,小于号,大于号,其他的很少使用</strong></p></li></ul><p><img src="/2021/09/21/html/number7.png"></p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><h3 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h3><ul><li>基本标签</li></ul><ol><li><p>作用:表格用来显示,展示数据</p></li><li><p>使用格式:</p></li></ol><p><img src="/2021/09/21/html/number8.png"></p><ol start="3"><li>介绍:</li></ol><p><img src="/2021/09/21/html/number9.png"></p><ul><li>表头单元格标签</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">用法: <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>表头<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br></code></pre></td></tr></table></figure><p>​        <strong>表头单元格里面的文字会加粗和居中显示</strong></p><ul><li>表格属性**( 这部分不太常用,后面经常用CSS来设置 )**</li></ul><p><img src="/2021/09/21/html/number10.png"></p><ul><li>表格结构标签</li></ul><p><img src="/2021/09/21/html/number11.png"></p><ul><li><p>合并单元格</p><p><strong>合并列则从左往右,合并行则从上往下</strong></p><p><strong>合并单元格三部曲</strong>:</p></li></ul><ol><li><p>先确定是合并行还是列</p></li><li><p>找到目标单元格(列找左,行找上),合并方式=合并数量</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">e.g: <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot; 2 &quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>删除多余单元格</li></ol>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端-html</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【CSS 学习笔记(一)】 基础选择器&amp;字体/文本属性&amp;引入方式</title>
    <link href="/2021/09/20/CSS/"/>
    <url>/2021/09/20/CSS/</url>
    
    <content type="html"><![CDATA[<div class="note note-light">            <p>This my learning notebook about CSS. Hope that the note book will help you.  </p>          </div><span id="more"></span><h1 id="CSS-NoteBook"><a href="#CSS-NoteBook" class="headerlink" title="CSS NoteBook"></a>CSS NoteBook</h1><h3 id="CSS简介"><a href="#CSS简介" class="headerlink" title="CSS简介"></a>CSS简介</h3><ol><li>CSS概念部分介绍<br>1.1  CSS——<strong>层叠样式表</strong><br>1.2 CSS主要用来设置HTML页面中的<strong>文本内容</strong>(字体,大小对齐方式)、<strong>图片的外形</strong>(宽高、边框样式、边距)<br><strong>以及版面的布局和外观显示样式</strong><br>1.3 CSS最大价值:<strong>由HTML专注去做结构呈现，样式交给CSS，即结构(HTML)与样式(CSS)相分离。</strong></li><li>CSS规则由主要两个部分构成:选择器+多条声明<ul><li><strong>选择器是用于指定CSS样式的HTML标签</strong></li><li>花括号内是对该对象设置的具体样式属性和属性值以“键值对”的形式出现</li><li>属性是对指定的对象设置的样式属性，例如<strong>字体大小、文本颜色</strong>等</li><li>属性和属性值之间用英文:分开</li><li>多个“键值对”之间用英文;进行区分</li></ul></li></ol><h3 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h3><p>选择器(选择符)就是根据不同需求把不同的标签选出来这就是选择器的作用。<br>简单来说，<strong>就是选择标签用的。</strong><br><img src="/2021/09/20/CSS/2021-08-24-17-56-29.png"></p><h5 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h5><p>标签选择器（元素选择器）是指用HTML标签名称作为选择器，按标签名称分类，为页面中某一类标签指定统一的CSS样式。</p><ul><li>优点:能快速为页面中同类型的标签统一设置样式。</li><li>缺点:不能设计差异化样式，只能选择全部的当前标签。</li><li></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css">使用案例:<br>&lt;style&gt;<br>    //给谁改样式&#123;改什么样式&#125;<br>    <span class="hljs-selector-tag">p</span>&#123;  <br>        //这里的<span class="hljs-selector-tag">p</span>是指给&lt;<span class="hljs-selector-tag">p</span>&gt;&lt;/<span class="hljs-selector-tag">p</span>&gt;更改样式<br>        <span class="hljs-attribute">color</span>: red; <br>        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;    //字体大小<br>    &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h5 id="类选择器-重要"><a href="#类选择器-重要" class="headerlink" title="类选择器(重要)"></a>类选择器(重要)</h5><ul><li>如果想要差异化选择不同的标签，<strong>单独选一个或者某几个标签</strong>，可以使用类选择器.</li><li>类选择器在HTML中以class属性表示，在CSS中，类选择器以一个  “.”+类  显示。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">语法格式:<br>.red&#123;<br>    color:red;<br>&#125;<br>可以理解为给这个标签起了一个名字:red<br></code></pre></td></tr></table></figure><p>需要用<strong>class属性</strong>来调用class类</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">div</span> class=&#x27;red&#x27;&gt; 变红色&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>//red为上面定义的<span class="hljs-selector-class">.red</span><br></code></pre></td></tr></table></figure><ul><li>多类名使用方式</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red font&quot;</span>&gt;</span> 内容<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li>在标签class属性中写多个类名</li><li><strong>多个类名中间必须用空格分开</strong></li><li>这个标签就可以分别具有这些类名的样式</li></ol><ul><li>多类名开发中使用场景</li></ul><ol><li>可以把一些<strong>标签元素相同的样式(共同的部分)放到一个类</strong>里面.</li><li>这些标签都可以<strong>调用这个公共的类</strong>,然后再<strong>调用自己独有的类.</strong></li></ol><h5 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h5><p>样式由#来定义,结构通过id=”样式”来调用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">使用方式:<br>#pink&#123;<br>    color:pink;<br>&#125;<br>&lt;<span class="hljs-selector-tag">div</span> id=&quot;pink&quot;&gt; <span class="hljs-attribute">content</span> &lt;/<span class="hljs-selector-tag">div</span>&gt;<br></code></pre></td></tr></table></figure><p>和类选择器的区别:<strong>只能调用一次</strong><br>id选择器一般用于页面唯一性的元素上，<strong>经常和JavaScript 搭配使用。</strong></p><h5 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h5><p>通配符选择器使用<em>定义,它表示*<em>选取页面中所有元素</em></em>,<strong>一般只在特殊情况中使用</strong><br>通配符选择器不需要调用，<strong>自动就给所有的元素使用样式</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">语法:<br>*&#123;<br>    color:red;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="字体属性"><a href="#字体属性" class="headerlink" title="字体属性"></a>字体属性</h3><h5 id="字体系列"><a href="#字体系列" class="headerlink" title="字体系列"></a>字体系列</h5><p><strong>font-family</strong>定义文本的字体系列</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">使用方式:<br>p&#123; font-family:<span class="hljs-string">&quot;微软雅黑&quot;</span>&#125;<br>//若直接使用:<br>body &#123;font-family.:<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>;&#125;<br>则定义所有文字采用雅黑字体<br></code></pre></td></tr></table></figure><ul><li>最常见的几个字体: body {font-family.:’Microsoft YaHei’;}</li><li>每种字体之间必须使用英文状态下的逗号隔开</li><li>一般情况下,如果有空格隔开的多个单词组成的字体,加引号</li><li>尽量使用系统默认自带字体，保证在任何用户的浏览器中都能正确显示</li></ul><h5 id="字体大小"><a href="#字体大小" class="headerlink" title="字体大小"></a>字体大小</h5><p><strong>font-size</strong>设置字体大小</p><ul><li><strong>px(像素)大小是最常用的单位</strong></li><li><strong>可以给body指定整个页面文字的大小</strong></li><li>谷歌浏览器默认的文字大小为16px</li><li>不同浏览器可能默认显示的字号大小不一致，尽量给一个明确值大小</li></ul><h5 id="字体粗细"><a href="#字体粗细" class="headerlink" title="字体粗细"></a>字体粗细</h5><p><strong>font-weight</strong>设置字体粗细</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">语法格式:<br>p&#123;<br>    font-weight:bold;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2021/09/20/CSS/2021-08-24-20-59-38.png"></p><h5 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h5><p><strong>font-style</strong>设置文本风格<br><img src="/2021/09/20/CSS/2021-08-24-21-12-15.png"></p><hr><h3 id="文本属性"><a href="#文本属性" class="headerlink" title="文本属性"></a>文本属性</h3><p><img src="/2021/09/20/CSS/2021-08-24-22-20-02.png"></p><h5 id="文本颜色"><a href="#文本颜色" class="headerlink" title="文本颜色"></a>文本颜色</h5><p><strong>color</strong>用于定义字体颜色</p><h5 id="文本对齐"><a href="#文本对齐" class="headerlink" title="文本对齐"></a>文本对齐</h5><p><strong>text-align</strong>用于设置文本内容的水平对齐方式</p><p><img src="/2021/09/20/CSS/2021-08-24-21-54-57.png"></p><h5 id="装饰文本"><a href="#装饰文本" class="headerlink" title="装饰文本"></a>装饰文本</h5><p><strong>text-decoration</strong>用于修饰文本——添加下划线,删除线等<br><img src="/2021/09/20/CSS/2021-08-24-21-57-45.png"></p><h5 id="文本缩进"><a href="#文本缩进" class="headerlink" title="文本缩进"></a>文本缩进</h5><p><strong>text-indent</strong>用于指定文本的首行缩进</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">语法格式:p&#123;    text-indent:<span class="hljs-number">10px</span>;    //所有&lt;<span class="hljs-selector-tag">p</span>&gt;标签分段的文字都缩进<span class="hljs-number">10px</span>&#125;<br></code></pre></td></tr></table></figure><h5 id="行间距"><a href="#行间距" class="headerlink" title="行间距"></a>行间距</h5><p><strong>line-height</strong>用于设置行间距</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">语法格式:p&#123;    line-height:<span class="hljs-number">26px</span>;    //行间距设置为<span class="hljs-number">26px</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="引入方式"><a href="#引入方式" class="headerlink" title="引入方式"></a>引入方式</h3><h5 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">使用方式: &lt;style&gt;    div&#123;        color:red;        <span class="hljs-attribute">font-size</span>:<span class="hljs-number">12px</span>;    &#125;&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>&lt; style &gt;标签理论上可以放在HTML文档的任何地方,但一般会放在文档的<br>&lt; head &gt;,标签中通过此种方式，可以方便控制当前整个页面中的元素样式设置</p><h5 id="行内样式表"><a href="#行内样式表" class="headerlink" title="行内样式表"></a>行内样式表</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">使用方式:&lt;div style=<span class="hljs-string">&quot;color:red; font-size: 12px;&quot;</span>&gt; content &lt;/div&gt;<br></code></pre></td></tr></table></figure><ul><li>style其实就是标签的属性</li><li>在双引号中间，写法要符合CSS规范</li><li>可以控制当前的标签设置样式</li></ul><h5 id="外部样式表-重点"><a href="#外部样式表-重点" class="headerlink" title="外部样式表(重点)"></a>外部样式表(重点)</h5><p>实际开发都是外部样式表.适合于样式比较多的情况.核心是:样式单独写到CSS文件中，之后把CSS文件引入到HTML页面中使用.</p><p><strong>引入外部样式表分为两步︰</strong></p><ol><li>新建一个后缀名为.css 的样式文件，把所有CSS代码都放入此文件中。</li><li>在 HTML页面中，使用<link>标签引入这个文件。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;link rel=&quot;stylesheet&quot; href=&quot;test1<span class="hljs-selector-class">.css</span>(文件路径)&quot;&gt;<br></code></pre></td></tr></table></figure><p><img src="/2021/09/20/CSS/2021-08-24-23-03-00.png"></p><h3 id="Chorme调试工具"><a href="#Chorme调试工具" class="headerlink" title="Chorme调试工具"></a>Chorme调试工具</h3><p><img src="/2021/09/20/CSS/2021-08-25-00-10-28.png"></p><hr><p>第二天</p><h3 id="Emmet语法"><a href="#Emmet语法" class="headerlink" title="Emmet语法"></a>Emmet语法</h3><h4 id="快速生成HTML结构语法-重点"><a href="#快速生成HTML结构语法-重点" class="headerlink" title="快速生成HTML结构语法(重点)"></a>快速生成HTML结构语法(重点)</h4><p>(节省时间的快捷键)<br><img src="/2021/09/20/CSS/2021-08-25-10-08-50.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">P.s:    div&#123;序号$&#125;*5-&gt;&gt;    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>序号1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>序号2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>序号3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>序号4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>序号5<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="快速生成CSS样式语法-重点"><a href="#快速生成CSS样式语法-重点" class="headerlink" title="快速生成CSS样式语法(重点)"></a>快速生成CSS样式语法(重点)</h4><p>(节省时间的快捷键)<br><strong>CSS基本采取简写形式即可</strong></p><ol><li>w200 按tab/enter –&gt; width:200px;</li><li>lh26 按tab/enter –&gt; line-height:26px;</li><li>td:none 按tab/enter –&gt; text-decorartion:none;</li><li>ti:2em 按tab/enter –&gt; text-indent:2em;</li></ol>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端-CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【CSS 学习笔记(三)】 盒子模型&amp;&amp;浮动&amp;&amp;PS部分使用技巧</title>
    <link href="/2021/09/20/CSS3/"/>
    <url>/2021/09/20/CSS3/</url>
    
    <content type="html"><![CDATA[<div class="note note-light">            <p>This my learning notebook about CSS. Hope that the note book will help you.  </p>          </div><span id="more"></span><style>  /* 设置整个页面的字体 */  html, body, .markdown-body {    font-family: KaiTi,"Microsoft YaHei",Georgia, sans, serif;    font-size: 18px;  }  /* 只设置 markdown 字体 */  .markdown-body {    font-family: KaiTi,"Microsoft YaHei",Georgia, sans, serif;    font-size: 18px;  }</style><h1 id="CSS-NoteBook"><a href="#CSS-NoteBook" class="headerlink" title="CSS NoteBook"></a>CSS NoteBook</h1><h3 id="CSS盒子模型"><a href="#CSS盒子模型" class="headerlink" title="CSS盒子模型"></a>CSS盒子模型</h3><p><strong>页面布局三大核心:盒子模型,浮动,定位</strong><br><strong>网页布局的本质:摆好盒子的位置再填充元素</strong></p><ul><li>CSS盒子模型本质上是一个盒子,封装周围的HTML元素<br>它包括:<strong>边框、外边距、内边距、和实际内容</strong><br>外边距:盒子之间的距离<br>内边距:内容和内边框的距离</li></ul><h5 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h5><p>border可以设置元素的边框。<br>边框有三部分组成:边框宽度(粗细),边框样式,边框颜色</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">语法∶<span class="hljs-selector-tag">div</span>&#123;    <span class="hljs-attribute">border-width</span>:<span class="hljs-number">5px</span>;    <span class="hljs-attribute">border-style</span>:solid;    <span class="hljs-comment">/* 1. solid实线边框    2. dashed虚线边框    3. dotted点线边框 */</span>    <span class="hljs-attribute">border-color</span>:red;&#125;&lt;<span class="hljs-selector-tag">div</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br></code></pre></td></tr></table></figure><p><img src="/2021/09/20/CSS3/img1.png"></p><p><strong>边框的复合写法</strong></p><ol><li>border: 1px solid red;<strong>(没有顺序要求)</strong></li><li><strong>对于特定某一条边更改:<br>border-top(bottom/left/right):1px solid red</strong></li><li>border-collapse:collaspe——合并相邻的边框</li></ol><h5 id="内边距-padding"><a href="#内边距-padding" class="headerlink" title="内边距(padding)"></a>内边距(padding)</h5><p><strong>padding</strong>用于设置内边距,即边框与内容之间的距离</p><p><img src="/2021/09/20/CSS3/img2.png"></p><p><strong>padding</strong>简写</p><p><img src="/2021/09/20/CSS3/img3.png"><br><strong>如果盒子本身没有指定width/height属性,则此时padding不会撑开盒子大小.</strong></p><h5 id="外边距-margin"><a href="#外边距-margin" class="headerlink" title="外边距(margin)"></a>外边距(margin)</h5><p><strong>margin</strong>属性用于设置外边距，即控制盒子和盒子之间的距离。</p><p><img src="/2021/09/20/CSS3/img4.png"><br><strong>外边距典型应用</strong><br>外边距可以让<strong>块级盒子</strong>水平居中，但是必须满足两个条件∶</p><ol><li>盒子必须指定了宽度( width ) </li><li>盒子左右的外边距都设置为auto</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.hezi</span>&#123;    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>  auto;    <span class="hljs-comment">/* 这里 margin-left:auto; margin-right:auto; 也可以 */</span>    <span class="hljs-comment">/* margin:auto; 也可以*/</span>&#125; <br></code></pre></td></tr></table></figure><p>对于<strong>行内元素/行内块元素</strong>——<strong>text-align:center</strong>;即可</p><p><strong>嵌套块元素垂直外边距的塌陷</strong><br>对于两个嵌套关系(父子关系）的块元素,父元素有上外边距同时子元素也有上外边距,此时父元素会塌陷较大的外边距值。</p><p>解决方案:</p><ol><li>可以为父元素定义上边框。(border)</li><li>可以为父元素定义上内边距。(padding)</li><li>可以为父元素添加overflow:hidden。</li></ol><h5 id="清除内外边距-CSS第一行代码"><a href="#清除内外边距-CSS第一行代码" class="headerlink" title="清除内外边距(CSS第一行代码)"></a>清除内外边距(CSS第一行代码)</h5><p>网页元素很多都带有默认的内外边距，而且不同浏览器默认的也不一致。因此我们在布局前<br>，首先要清除下网页元素的内外边距。<br><strong>这也是CSS一般情况下的第一行代码</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">*&#123;    <span class="hljs-attribute">padding</span>:<span class="hljs-number">0</span>;<span class="hljs-comment">/*清除内边距*/</span>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<span class="hljs-comment">/*清除外边距*/</span>&#125;<br></code></pre></td></tr></table></figure><h4 id="圆角边框-重点"><a href="#圆角边框-重点" class="headerlink" title="圆角边框(重点)"></a>圆角边框(重点)</h4><p><strong>border-radius</strong>属性用于设置元素的外边框圆角<br><strong>原理</strong>:圆(直径由length设置)与边框的交集形成圆角效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">语法:border-radius:length;<br></code></pre></td></tr></table></figure><p><img src="/2021/09/20/CSS3/img5.png"></p><h4 id="盒子阴影-重点"><a href="#盒子阴影-重点" class="headerlink" title="盒子阴影(重点)"></a>盒子阴影(重点)</h4><p><strong>box-shadow</strong>为盒子添加阴影</p><p><img src="/2021/09/20/CSS3/img6.png"><br>注意:</p><ol><li>默认的是外阴影(outset),但是不可以写这个单词,否则导致阴影无效</li><li><strong>盒子阴影不占用空间，不会影响其他盒子排列。</strong></li></ol><p>P.s:<strong>text-shadow</strong>为文字添加阴影</p><p><img src="/2021/09/20/CSS3/img7.png"></p><h3 id="CSS浮动-float"><a href="#CSS浮动-float" class="headerlink" title="CSS浮动(float)"></a>CSS浮动(float)</h3><p>(标准流即使用标签正常的排版方式,也就是你之前一直在使用的排版方式)</p><h5 id="浮动概念"><a href="#浮动概念" class="headerlink" title="浮动概念"></a>浮动概念</h5><p>浮动可以改变元素标签默认的排列方式<br>典型应用:让多个块级元素在一行内排列显示<br><strong>网页布局第一准则</strong>:多个块元素纵向排列找标准流,多个块元素横向排列找浮动。</p><p> –&gt;先用标准流纵向排列,在标准流一个父级元素内部再采用浮动排列。<br>float用于创建浮动框</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;    <span class="hljs-attribute">float</span>:参数;&#125;<br></code></pre></td></tr></table></figure><p><img src="/2021/09/20/CSS3/img8.png"></p><h4 id="浮动特性-重难点"><a href="#浮动特性-重难点" class="headerlink" title="浮动特性(重难点)"></a>浮动特性(重难点)</h4><p>设置了浮动( float )的元素最重要特性︰</p><ol><li>脱离标准普通流的控制（浮）移动到指定位置(动)，(俗称脱标)</li><li>浮动的盒子不再保留原先的位置</li><li><strong>如果多个盒子都设置了浮动,它们会按照属性值一行内显示并且顶端对齐排列。</strong></li><li>浮动元素会具有行内块元素特性。</li><li>任何元素都可以浮动。不管原先是什么模式的元素，添加浮动之后具有行内块元素相似的特性。</li><li>如果<strong>块级盒子没有设置宽度,默认宽度和父级一样宽</strong>,但是添加浮动后，它的大小根据内容来决定</li><li>浮动的盒子中间是没有缝隙的，是紧挨着一起的</li><li>行内元素同理</li></ol><p><img src="/2021/09/20/CSS3/img9.png"></p><p><strong>注意∶</strong>浮动的元素是互相贴靠在一起的(不会有缝隙),如果父级宽度装不下这些浮动的盒子，多出的盒子会另起一行对齐。</p><h4 id="浮动布局注意点"><a href="#浮动布局注意点" class="headerlink" title="浮动布局注意点"></a>浮动布局注意点</h4><ol><li><strong>浮动和标准流的父盒子搭配</strong>。<br>先用标准流的父元素排列上下位置,之后内部子元素采取浮动排列左右位置</li><li>一个盒子里面有多个子盒子，如果其中一个盒子浮动了，那么其他兄弟也应该浮动，以防止引起问题。</li><li><strong>浮动的盒子只会影响浮动盒子后面的标准流不会影响前面的标准流.</strong></li></ol><h4 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h4><p>由于父级盒子很多情况下，不方便给高度，但是子盒子浮动又不占有位置，最后父级盒子高度为0时，就会影响下面的标准流盒子。<br>由于浮动元素不再占用原文档流的位置，所以它会对后面的元素排版产生影响</p><h5 id="为什么要清除浮动"><a href="#为什么要清除浮动" class="headerlink" title="为什么要清除浮动"></a>为什么要清除浮动</h5><ol><li>清除浮动的本质是清除浮动元素造成的影响</li><li>如果父盒子本身有高度，则不需要清除浮动</li><li>清除浮动之后，父级就会根据浮动的子盒子自动检测高度。父级有了高度，就不会影响下面的标准流了</li></ol><h5 id="清除浮动的方法"><a href="#清除浮动的方法" class="headerlink" title="清除浮动的方法"></a>清除浮动的方法</h5><p><img src="/2021/09/20/CSS3/img10.png"></p><ol><li>额外标签法也称为隔墙法，是W3C推荐的做法。</li><li><strong>父级添加overflow属性</strong></li><li><strong>父级添加after伪元素</strong></li><li><strong>父级添加双伪元素</strong></li></ol><ul><li><p><strong>额外标签法</strong><br>额外标签法也称为隔墙法，是W3C推荐的做法。<br>额外标签法会在浮动元素末尾添加一个空的标签。例如&lt; div style=” clear:both”&gt;&lt; /div&gt;，或者其他标签(如&lt; br/&gt;等)。</p><ol><li>优点︰通俗易懂，书写方便</li><li>缺点︰添加许多无意义的标签，结构化较差<br><strong>注意:要求这个新的空标签必须是块级元素。</strong></li></ol></li><li><p><strong>父元素添加overflow</strong></p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">语法:父元素&#123;    color:red;    <span class="hljs-attribute">overflow</span>:hidden;&#125;<br></code></pre></td></tr></table></figure><ul><li>:<strong>after伪元素法</strong><br>:after方式是额外标签法的升级版。也是给父元素添加</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.clearfix</span>:after &#123;    content : <span class="hljs-string">&quot;&quot;</span>;    <span class="hljs-attribute">display</span> : block;    <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;    <span class="hljs-attribute">clear</span>: both;    <span class="hljs-attribute">visibility</span>: hidden;+&#125;<span class="hljs-selector-class">.clearfix</span> &#123;     *zoom: <span class="hljs-number">1</span>;&#125;<span class="hljs-comment">/* 父元素添加标签&quot;clearfix&quot; */</span>&lt;<span class="hljs-selector-tag">div</span> class=&quot;clearfix&quot;&gt; 盒子内容&lt;/<span class="hljs-selector-tag">div</span>&gt;<br></code></pre></td></tr></table></figure><p>优点∶没有增加标签，结构更简单</p><ul><li><strong>双伪元素清除浮动</strong><br><strong>也是给给父元素添加</strong></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.clearfix</span>:before,.clearfix: after &#123;    content : <span class="hljs-string">&quot;&quot;</span>;    <span class="hljs-attribute">display</span>:table;&#125;<span class="hljs-selector-class">.clearfix</span>:after &#123;    clear:both;&#125;<span class="hljs-selector-class">.clearfix</span> &#123;    *zoom: <span class="hljs-number">1</span>;&#125;<br></code></pre></td></tr></table></figure><p>优点︰代码更简洁</p><h3 id="PS使用"><a href="#PS使用" class="headerlink" title="PS使用"></a>PS使用</h3><p>常见的图片格式</p><ol><li>jpg图像格式:JPEG ( JPG ）对色彩的信息保留较好，高清，颜色较多，我们产品类的图片经常用jpg格式</li><li>gif图像格式:GIF格式最多只能储存256色，所以通常用来显示简单图形及字体，但是可以保存透明背景和动画效果,实际经常用于一些图片小动画效果</li><li>png图像格式是一种新兴的网络图形格式，结合了GIF和JPEG的优点，具有存储形式丰富的特点，能够保持透明背景.如果想要切成背景透明的图片,请选择png格式.</li><li>PSD图像格式PSD格式是Photoshop的专t格式，里面可以存放图层、通道、遮罩等多种设计稿.<strong>对我们前端人员来说,最大的优点我们可以直接从上面复制文字,获得图片,还可以测量大小和距离.</strong></li></ol><h4 id="PS的切图方式"><a href="#PS的切图方式" class="headerlink" title="PS的切图方式"></a>PS的切图方式</h4><h5 id="图层切图-最常用"><a href="#图层切图-最常用" class="headerlink" title="图层切图(最常用)"></a>图层切图(最常用)</h5><p>  最简单的切图方式: 右击图层—&gt;快速导出为png<br>最简单的切图方式:右击图层→快速导出为PNG。但是很多情况下,我们需要合并图层再导出:<br>1.选中需要的图层:图层菜单→合并图层(ctrl+e)<br>2.右击→快速导出为PNG</p><h5 id="切片切图"><a href="#切片切图" class="headerlink" title="切片切图"></a>切片切图</h5><p>1.利用切片选中图片<br>利用切片工具手动划出<br>2.导出选中的图片<br><strong>文件菜单–&gt;导出–&gt;存储为web设备所用格式–&gt;选择我们要的图片格式–&gt;存储。</strong><br>P.s:建议遵循以下顺序:<br>1.布局定位属性:dis<br>2.自身属性: width /<br>3.文本属性:color / f<br>4.其他属性( CSS3 )</p><p>导航栏注意点:<br>实际开发中，我们不会直接用链接a而是用li包含链接(li+a)的做法。</p><ol><li>li+a语义更清晰，一看这就是有条理的列表型内容。<br>2．如果直接用a，搜索引擎容易辨别为有堆砌关键字嫌疑（故意堆砌关键字容易被搜索引擎有降权的风险），<br>从而影响网站排名</li></ol>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端-CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【CSS 学习笔记(二)】 复合选择器&amp;显示模式&amp;CSS背景&amp;CSS三大特性</title>
    <link href="/2021/09/20/CSS2/"/>
    <url>/2021/09/20/CSS2/</url>
    
    <content type="html"><![CDATA[<div class="note note-light">            <p>This my learning notebook about CSS. Hope that the note book will help you.  </p>          </div><span id="more"></span><style>  /* 设置整个页面的字体 */  html, body, .markdown-body {    font-family: KaiTi,"Microsoft YaHei",Georgia, sans, serif;    font-size: 15px;  }  /* 只设置 markdown 字体 */  .markdown-body {    font-family: KaiTi,"Microsoft YaHei",Georgia, sans, serif;    font-size: 15px;  }</style><h1 id="CSS-NoteBook"><a href="#CSS-NoteBook" class="headerlink" title="CSS NoteBook"></a>CSS NoteBook</h1><h3 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h3><ol><li>复合选择器可以更准确、更高效的选择目标元素（标签)</li><li>复合选择器是由两个或多个基础选择器，通过不同的方式组合而成的</li><li>常用的复合选择器包括︰后代选择器、子选择器、并集选择器、伪类选择器等</li></ol><h5 id="复合选择器总结"><a href="#复合选择器总结" class="headerlink" title="复合选择器总结"></a>复合选择器总结</h5><p><img src="/2021/09/20/CSS2/img1.png"></p><h5 id="后代选择器-重要"><a href="#后代选择器-重要" class="headerlink" title="后代选择器(重要)"></a>后代选择器(重要)</h5><p>后代选择器又称为包含选择器，可以选择父元素里面子元素。<br>其写法就是把外层标签写在前面，内层标签写在后面，中间用空格分隔。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">语法:ul li &#123;    color:red;&#125;<span class="hljs-comment">/* 选择ul里面的所有li标签元素 */</span><span class="hljs-selector-tag">P</span><span class="hljs-selector-class">.S</span>:如果使用了两个div,想加以区分的话可以使用&lt;div class=<span class="hljs-string">&quot;nav(此处任意设置标签名称)&quot;</span>&gt;.nav li&#123;    color:red;&#125;<span class="hljs-comment">/* 这样可以实现只对其中一个div选择更改样式 */</span><br></code></pre></td></tr></table></figure><p>注意点:</p><ol><li>元素1和元素2中间用空格隔开</li><li>元素1是父级，元素2是子级，最终选择的是元素2</li><li>元素2可以是儿子，也可以是孙子等，<strong>只要是元素1的后代即可</strong></li><li>元素1和元素2可以是任意基础选择器 </li></ol><h5 id="子选择器-重要"><a href="#子选择器-重要" class="headerlink" title="子选择器(重要)"></a>子选择器(重要)</h5><p>子选择器只能选择最近一级子元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">语法:div &gt; p &#123;    color:red;&#125;<span class="hljs-comment">/* 选择div里面最近一级p标签元素 */</span><br></code></pre></td></tr></table></figure><p>注意点:</p><ol><li>元素1和元素2中间用大于号隔开</li><li>元素1是父级，元素2是子级，最终选择的是元素2</li><li><strong>元素2必须是亲儿子</strong>，其孙子、重孙之类都不归他管.</li></ol><h5 id="并集选择器-重要"><a href="#并集选择器-重要" class="headerlink" title="并集选择器(重要)"></a>并集选择器(重要)</h5><p>并集选择器可以选择多组标签,同时为他们定义相同的样式<br><strong>并集选择器是各选择器通过英文逗号(，)连接而成</strong><br>任何形式的选择器都可以作为并集选择器的一部分。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">语法:ul,div&#123;    color:red;&#125;<span class="hljs-comment">/* 选择ul和div标签元素 */</span><br></code></pre></td></tr></table></figure><ol><li>元素1和元素2中间用逗号隔开</li><li>逗号可以理解为和的意思</li></ol><h5 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h5><ol><li>伪类选择器用于向某些选择器添加特殊的效果，比如给链接添加特殊效果</li><li>伪类选择器书写最大的特点是用冒号(:)表示，比如:hover 、:first-child 。<br>伪类选择器分为链接,结构伪类等</li></ol><ul><li><p><strong>链接</strong>伪类选择器<br><strong>a:link</strong>选择没有点击过的链接<br><strong>a:visited</strong>选择点击过的链接<br><strong>a:hover</strong>选择鼠标经过的链接   <strong>(最常用)</strong><br><strong>a:active</strong>选择鼠标按下未弹起的链接<br>1.为了确保生效，请按照LVHA的循顺序声明:link - :visited - :hover - :active,<br>2.因为a链接在浏览器中具有默认样式，实际工作中都需要给链接单独指定样式。</p></li><li><p><strong>focus</strong>伪类选择器<br>用于选取获得光标的表单元素(也就是目前鼠标所在的表单),针对于input使用</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">语法:input:focus&#123;    color:red;&#125;<br></code></pre></td></tr></table></figure><h3 id="CSS元素显示模式"><a href="#CSS元素显示模式" class="headerlink" title="CSS元素显示模式"></a>CSS元素显示模式</h3><p>元素显示模式就是元素以什么方式显示,div占一行,一行放多个span<br>HTML元素一般分为<strong>块元素</strong>和<strong>行内元素</strong>两种类型</p><h4 id="块元素"><a href="#块元素" class="headerlink" title="块元素"></a>块元素</h4><p>常见的有:&lt; h1 &gt;~&lt; h6 &gt;、&lt; p &gt;、&lt; div &gt;、&lt; ul &gt;、&lt; ol &gt;<br><strong>块级元素的特点:</strong></p><ol><li>独占一行。</li><li>高度，宽度、外边距以及内边距都可以控制。宽度默认是容器(父级宽度)的100%。</li><li>是一个容器及盒子，里面可以放行内或者块级元素。</li></ol><p>注意！！<br><strong>文字类的元素内不能使用块级元素</strong></p><ul><li>&lt; p&gt;标签主要用于存放文字，因&lt; p&gt;里面不能放块级元素，特别是不能放&lt; div&gt;</li><li>同理，&lt; h1&gt;~&lt; h6&gt;等都是文字类块级标签，里面也不能放其他块级元素</li></ul><h4 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h4><p>常见的有:&lt; a&gt; 、&lt; strong&gt;、&lt; em&gt;、&lt; i&gt;、&lt; del&gt;、&lt; span&gt;等<br>其中&lt; span&gt;标签是最典型的行内元素<br><strong>行内元素的特点∶</strong></p><ol><li>相邻行内元素在一行上，一行可以显示多个。</li><li>高、宽直接设置是无效的。</li><li>默认宽度就是它本身内容的宽度。</li><li><strong>行内元素只能容纳文本或其他行内元素。</strong></li></ol><h4 id="行内块元素"><a href="#行内块元素" class="headerlink" title="行内块元素"></a>行内块元素</h4><p>在行内元素中有几个特殊的标签————&lt; img /&gt;、&lt; input /&gt;、&lt; td&gt;,他们同时具有行内元素和块元素的特点。<br><strong>行内块元素的特点∶</strong></p><ol><li>和相邻行内元素(行内块)在一行上，之间会有空白缝隙。</li><li><strong>一行可以显示多个</strong>(行内元素特点)。</li><li>默认宽度就是它本身内容的宽度（行内元素特点)。</li><li><strong>高度，行高、外边距以及内边距都可以控制</strong>(块级元素特点)。</li></ol><h4 id="元素显示模式转换"><a href="#元素显示模式转换" class="headerlink" title="元素显示模式转换"></a>元素显示模式转换</h4><p>需要元素模式的转换,一个模式的元素需要另外一种模式的特性。<br><strong>比如想要增加链接&lt; a &gt;的触发范围。</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">使用方法如下:<span class="hljs-number">1</span>. 转换为块元素:display:block;<span class="hljs-selector-tag">a</span>&#123;    <span class="hljs-attribute">width</span>:<span class="hljs-number">500px</span>;    <span class="hljs-attribute">display</span>:block;&#125;<span class="hljs-number">2</span>. 转换为行内元素:display:inline;<span class="hljs-number">3</span>. 转换为行内块:display: inline-block;<br></code></pre></td></tr></table></figure><p><strong>让文字的行高等于盒子高度可以实现垂直居中</strong></p><h3 id="CSS背景"><a href="#CSS背景" class="headerlink" title="CSS背景"></a>CSS背景</h3><h5 id="背景总结"><a href="#背景总结" class="headerlink" title="背景总结:"></a>背景总结:</h5><p><img src="/2021/09/20/CSS2/img4.png"></p><h5 id="背景颜色"><a href="#背景颜色" class="headerlink" title="背景颜色"></a>背景颜色</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">background-color:颜色值;<br></code></pre></td></tr></table></figure><h5 id="背景图片"><a href="#背景图片" class="headerlink" title="背景图片"></a>背景图片</h5><p><strong>background-image</strong>属性描述了元素的背景图像。实际开发常见于logo或者一些装饰性的小图片或者是超大的背景图片,<strong>优点是非常便于控制位置.</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">background-image : none / url (url)url——使用路径指示图片位置<br></code></pre></td></tr></table></figure><h5 id="背景平铺"><a href="#背景平铺" class="headerlink" title="背景平铺"></a>背景平铺</h5><p>在HTML页面上对背景图像进行平铺,使用<strong>background-repeat</strong>属性。<br>background-repeat: repeat</p><p><img src="/2021/09/20/CSS2/img2.png"></p><h5 id="背景图片位置"><a href="#背景图片位置" class="headerlink" title="背景图片位置"></a>背景图片位置</h5><p><strong>1. 参数是方位名词</strong></p><ul><li>如果指定的两个值都是方位名词，则两个值前后顺序无关，比如left top和top left效果一致</li><li>如果只指定了一个方位名词，另一个值省略，则第二个值默认居中对齐</li></ul><p><strong>2. 参数是精确单位</strong></p><ul><li>如果参数值是精确坐标，那么第一个肯定是x坐标，第二个一定是y坐标</li><li>如果只指定一个数值，那该数值一定是x坐标，另一个默认垂直居中</li></ul><h5 id="背景图像固定"><a href="#背景图像固定" class="headerlink" title="背景图像固定"></a>背景图像固定</h5><p><strong>background-attachment</strong>属性设置背景图像是否固定或者随着页面其余部分滚动。<br><strong>background-attachment后期可以制作视差滚动的效果。</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">background-attachment: scroll<br></code></pre></td></tr></table></figure><p><img src="/2021/09/20/CSS2/img3.png"></p><h5 id="背景色半透明"><a href="#背景色半透明" class="headerlink" title="背景色半透明"></a>背景色半透明</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">background:rgba(0,0,0,0.3)<br></code></pre></td></tr></table></figure><ol><li>最后一个参数是alpha透明度，取值范围在0~1之间</li><li>注意:背景半透明是指盒子背景半透明，盒子里面的内容不受影响</li></ol><h3 id="CSS的三大特性"><a href="#CSS的三大特性" class="headerlink" title="CSS的三大特性"></a>CSS的三大特性</h3><h5 id="层叠性"><a href="#层叠性" class="headerlink" title="层叠性"></a>层叠性</h5><p>层叠性原则:</p><ul><li>样式冲突，<strong>就近原则</strong>，哪个离结构近，就执行哪个样式</li><li>样式不冲突，不会层叠</li></ul><h5 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h5><ul><li>CSS中的继承:子标签会继承父标签的某些样式，如文本颜色和字号。<br>子元素可以继承父元素的样式( text-, font-, line-这些元素开头的可以继承，以及color属性)</li><li>行高的继承<br>行高可以跟单位也可以不跟单位<br>body行高1.5这种写法最大优势就是子元素可以根据自己文字大小自动调整行高</li></ul><h5 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h5><ul><li>选择器相同,则执行层叠性</li><li>选择器不同,则根据<strong>选择器权重</strong>执行<br><img src="/2021/09/20/CSS2/img5.png"><br><strong>注意点:</strong></li></ul><ol><li><strong>继承的权重是0</strong>,如果该元素没有直接选中，不管父元素权重多高，子元素得到的权重都是0。</li><li>权重是有4组数字组成,<strong>但是不会有进位</strong></li><li>类选择器永远大于元素选择器, id选择器永远大于类选择器</li><li><strong>等级判断从左向右</strong>,如果某一位数值相同，则判断下一位数值。</li></ol><ul><li><strong>权重叠加</strong>︰如果是复合选择器，则会有权重叠加，需要计算权重。</li></ul>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端-CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/09/20/hello-world/"/>
    <url>/2021/09/20/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is my very first post. </p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
